<?php

declare(strict_types=1);

namespace Twint\Sdk\Tools;

require_once __DIR__ . '/../vendor/autoload.php';

use ReflectionClassConstant;
use ReflectionMethod;
use Roave\BetterReflection\BetterReflection;
use Roave\BetterReflection\Reflection\ReflectionClass;
use Roave\BetterReflection\Reflector\DefaultReflector;
use Roave\BetterReflection\SourceLocator\Type\AggregateSourceLocator;
use Roave\BetterReflection\SourceLocator\Type\AutoloadSourceLocator;
use Roave\BetterReflection\SourceLocator\Type\FileIteratorSourceLocator;
use Roave\BetterReflection\SourceLocator\Type\MemoizingSourceLocator;
use Roave\BetterReflection\SourceLocator\Type\PhpInternalSourceLocator;
use Symfony\Component\Finder\Finder;
use function Psl\invariant;
use function Psl\Type\string;

function toClassName(ReflectionClass $class): string
{
    $elements = explode('\\', $class->getName());

    invariant($elements[0] === 'Twint', 'Must be in Twint namespace');
    invariant($elements[1] === 'Sdk', 'Must be in Sdk namespace');

    return implode('-', array_map('Twint\Sdk\Tools\camelCaseToSnakeCase', array_slice($elements, 2)));
}

function toName(string $prefix, ReflectionClass $class, string $suffix = ''): string
{
    $name = sprintf('%s-%s', $prefix, toClassName($class));

    return $suffix === '' ? $name : sprintf('%s-%s', $name, camelCaseToSnakeCase($suffix));
}

function camelCaseToSnakeCase(string $string): string
{
    return preg_match('/^[A-Z0-9_]+$/', $string) === 1
        ? str_replace('_', '-', strtolower($string))
        : ltrim(strtolower(string()->assert(preg_replace('/(?<!^)[A-Z]/', '-$0', $string))), '-');
}

$betterReflection = new BetterReflection();
$classes = (new DefaultReflector(
    new MemoizingSourceLocator(
        new AggregateSourceLocator([
            new FileIteratorSourceLocator(
                Finder::create()
                    ->name('*.php')
                    ->in(__DIR__ . '/../src')
                    ->notPath('/Generated/')
                    ->notName('polyfill.php')
                    ->getIterator(),
                $betterReflection->astLocator()
            ),
            new PhpInternalSourceLocator($betterReflection->astLocator(), $betterReflection->sourceStubber()),
            new AutoloadSourceLocator($betterReflection->astLocator(), $betterReflection->phpParser()),
        ])
    )
))->reflectAllClasses();

$lines = [
    '.. --------------------------------------------------',
    sprintf('.. This file is auto-generated by %s', basename(__FILE__)),
    sprintf('.. DO NOT EDIT MANUALLY'),
    '.. --------------------------------------------------',
];

foreach ($classes as $class) {
    $lines[] = sprintf(
        '.. |%s| replace:: ``%s``',
        toName($class->isInterface() ? 'interface' : 'class', $class),
        $class->getName()
    );
    foreach ($class->getMethods(ReflectionMethod::IS_PUBLIC) as $method) {
        $lines[] = sprintf(
            '.. |%s| replace:: ``%s``',
            toName('method', $class, $method->getName()),
            $method->getName()
        );
        $lines[] = sprintf(
            '.. |%s| replace:: ``%s``',
            toName('fq-method', $class, $method->getName()),
            sprintf('%s::%s', $class->getName(), $method->getName())
        );
    }
    foreach ($class->getConstants(ReflectionClassConstant::IS_PUBLIC) as $constant) {
        $lines[] = sprintf(
            '.. |%s| replace:: ``%s``',
            toName('const', $class, $constant->getName()),
            $constant->getName()
        );
        $lines[] = sprintf(
            '.. |%s| replace:: ``%s``',
            toName('fq-const', $class, $constant->getName()),
            sprintf('%s::%s', $class->getName(), $constant->getName())
        );
    }
}

sort($lines);

file_put_contents(__DIR__ . '/../resources/docs/symbols.rst', implode("\n", $lines) . "\n");
